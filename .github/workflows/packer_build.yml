name: Build and Deploy

on: [push]
env:
  DB_HOST: "localhost"
  DB_USER: "root"
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}  

jobs:
  BuildPacker:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Hello Message
      run: echo "Hello, GitHub Actions!"

    - name: Starting Node JS message
      run: echo "Setting up Node JS"

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Finishing Node JS set up message
      run: echo "Node JS installation done"

    - name: Starting installation for mysql-server
      run: echo "mysql-server installation done"

    - name: Show environment variables
      run: |
        echo "DB_HOST=${HOST}"
        echo "DB_USER=${MYSQLUSER}"
        echo "DB_PASSWORD=${PASSWORD}"
        
    - name: configuremysql
      run: |
        sudo apt-get update
        sudo systemctl start mysql
        sudo systemctl status mysql
        mysql -u root -p"${DB_PASSWORD}" -e "CREATE DATABASE assignmentsdb;"

    - name: Starting dependency installation
      run: echo "Installing Dependencies"

    - name: Install dependencies
      run: npm install

    - name: Dependency installation completed
      run: echo "Dependencies Installed"

    - name: Running test files
      run: echo "Starting test"

    - name: run tests
      run: npm test

    - name: Test files execution completion
      run: echo "Finished running test files"  

    - name: Zip the artifact
      run: |
        zip -r web_app_ami.zip ./
        ls -lrth

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: app-artifact
        path: webapp.zip

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }} 

    - name: Setup `packer`
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: 'latest'

    - name: Packer Init
      run: packer init packer/ami.us-east-1.pkr.hcl
  

    - name: Build AMI with Packer
      run: |
        packer build -var-file=packer/packer_config.hcl packer/ami.us-east-1.pkr.hcl

    - name: Set up AWS CLI for demo
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_ID_DEMO }}
        aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY_DEMO }}
        aws-region: ${{ secrets.AWS_REGION_AMI }}

    - name: Get AMI ID
      id: get_ami_id
      run: |
        ami_id=$(aws ec2 describe-images --owners 078187768987 --filters "Name=name,Values=csye6225_f23_*" --query 'Images | sort_by(@, &CreationDate) | [-1].[ImageId]' --output text)
        echo "AMI_ID=$ami_id" > ami_id.txt
        echo "AMI_ID: $ami_id"

    - name: Create Launch Template
      run: |
        aws ec2 create-launch-template-version --launch-template-name "myCloudLaunchTemplate" --source-version 1 --launch-template-data "{\"ImageId\":\"$ami_id\"}"

    - name: Refresh autoscaling group
      run: |
        aws autoscaling start-instance-refresh --auto-scaling-group-name "myAutoScalingGroup-1795bbd"
